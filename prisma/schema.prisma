generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  steamid           String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  balance             Decimal
  accounts            Account[]
  sessions            Session[]
  UserMatchPrediction UserMatchPrediction[]
  ReceivedMessages    Message[]             @relation("recipient")
  SentMessages        Message[]             @relation("sender")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id                  String                @id @default(cuid())
  teamA_name          String
  teamB_name          String
  teamA_odds          Decimal
  teamB_odds          Decimal
  teamA_logoUrl       String?               @default("https://www.hltv.org/img/static/team/placeholder.svg")
  teamB_logoUrl       String?               @default("https://www.hltv.org/img/static/team/placeholder.svg")
  bestOf              Int
  dateAndTime         DateTime
  hltvUrl             String?
  winner              Int?
  UserMatchPrediction UserMatchPrediction[]
  Season              Season?               @relation(fields: [seasonId], references: [id])
  seasonId            String?

  @@index([seasonId])
}

model UserMatchPrediction {
  userId           String
  matchId          String
  user             User     @relation(fields: [userId], references: [id])
  match            Match    @relation(fields: [matchId], references: [id])
  pickedTeam       Int
  predictionOdds   Decimal
  predictionAmount Decimal
  balanceChange    Decimal?
  balanceAfter     Decimal?

  @@id([userId, matchId])
  @@index([matchId])
  @@index([userId])
}

model Season {
  id      String         @id @default(cuid())
  name    String
  start   DateTime
  end     DateTime
  Matches Match[]
  Rewards SeasonReward[]
}

model SeasonReward {
  ladderPlaceStart Int
  ladderPlaceEnd   Int
  itemName         String
  itemCount        Int     @default(1)
  itemImageUrl     String? @db.LongText
  Season           Season? @relation(fields: [seasonId], references: [id])
  seasonId         String?

  @@id([itemName, ladderPlaceStart, ladderPlaceEnd])
  @@index([seasonId])
}

model Message {
  id              String  @id @default(cuid())
  content         String
  seen            Boolean
  senderUserId    String?
  recipientUserId String
  sender          User?   @relation("sender", fields: [senderUserId], references: [id])
  recipient       User    @relation("recipient", fields: [recipientUserId], references: [id])

  @@index([recipientUserId])
  @@index([senderUserId])
}
